// Colours, based on the Python logo plus bone / brown
// https://coolors.co/ffde57-4584b6-646464-f8f1e5-231c07
$colPyYellow: #ffde57;
$colPyBlue: #4584b6;
$colPyGrey: #646464;
$colBone: #f8f1e5;
$colZinnwalditeBrown: #231c07;

// anologous colors to expond with
$colKiwi: #7edb4f;
$colLightTaupe: #b28f77;

@function shade($color, $idx) {
  // color shades from -10 through to 10, 0 being the current
  // negative numbers are darker, positive are lighter
  @return scale_color($color, $lightness: (100% / 11) * $idx);
}

// Background colours
$backgroundColour: shade($colBone, 9);
$codeBackgroundColour: $colBone;
$featureBackgroundColour: $colBone;
$accentColour: $colPyBlue;

// Text colours
$headingColour: $colZinnwalditeBrown;
$bodyColour: $colZinnwalditeBrown;
$linkColour: $colPyBlue;
$hoverColour: $colPyYellow;
$focusColour: $colPyYellow;
$captionColour: $colPyGrey;

// Typography

// Cap heights determined with https://github.com/sebdesign/cap-height
// When using the codepen to load the cap-height, do add a text: "H" entry to the google
// loader config to make Yeon Sung work with the loader.
// see https://github.com/typekit/webfontloader/issues/401
$bodytype: (
  font-family: 'Roboto, serif',
  regular: 400,
  bold: 700,
  italic: italic,
  cap-height: 0.72
);

$headingtype: (
  font-family: '"Yeon Sung", serif',
  regular: 400,
  bold: bold,
  cap-height: 0.68
);

$monospacetype: (
  font-family: 'Menlo, monospace',
  regular: 400,
  cap-height: 0.68
);

@import url('https://fonts.googleapis.com/css?family=Roboto:400,700|Yeon+Sung|Inconsolata');

// Pygments "friendly" theme
$highlight-style: (
  comment: (color: shade($colPyBlue, 2), italic: true) (
    preproc: shade($colZinnwalditeBrown, 3),
    special: (color: shade($colPyBlue, 2), bgcolor: shade($colBone, -2)),
  ),
  error: (border: #ff0000),
  generic: null (
    deleted: #a00000,
    error: #ff0000,
    heading: (color: shade($colZinnwalditeBrown, 1), bold: true),
    inserted: #00A000,
    output: shade($colPyGrey, 3),
    prompt: (color: shade($colPyYellow, -5), bold: true),
    subheading: (color: #800080, bold: true),
    traceback: shade($colPyBlue, 4),
  ),
  highlight: (bgcolor: shade($colBone, 2)),
  keyword: (color: shade($colPyYellow, -7)) (
    pseudo: shade($colPyYellow, -8),
    type: shade($colZinnwalditeBrown, 4),
  ),
  literal: null (
    number: #40a070,  // with float, hex, integer, integer.long and oct subtypes
    string: $colPyBlue (
      // backtick, char, double, heredoc, single all inheriting
      doc: (color: $colPyBlue, italic: true),
      escape: (color: $colPyBlue, bold: true),
      interpol: (color: shade($colPyBlue, 3), italic: true),
      other: shade($colZinnwalditeBrown, 5),
      regex: shade($colPyBlue, -5),
      symbol: shade($colPyBlue, 5),
    ),
  ),
  name:  $colZinnwalditeBrown (
    attribute: $colPyBlue,
    builtin: shade($colPyBlue, -2),
    class: (color: shade($colPyBlue, 1), bold: true),
    constant: shade($colPyBlue, 4),
    decorator: (color: shade($colPyGrey, -2), bold: true),
    entity: (color: #d55537, bold: true),
    exception: shade($colKiwi, -2),
    function: (color: $colKiwi, bold: true),
    label: (color: shade($colPyBlue, -5), bold: true),
    namespace: (color: shade($colPyBlue, -5), bold: true),
    tag: (color: shade($colPyBlue, -6), bold: true),
    variable: #bb60d5,  // with class, global and instance subtypes same
  ),
  operator: $colPyGrey (
    word: (color: shade($colPyBlue, 3), bold: true),
  ),
  text: null (
    whitespace: shade($colPyGrey, 6),
  ),
);
